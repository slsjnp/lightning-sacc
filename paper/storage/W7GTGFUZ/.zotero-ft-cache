arXiv:2007.10247v1 [cs.CV] 20 Jul 2020

Learning Joint Spatial-Temporal Transformations for Video Inpainting
Yanhong Zeng1,2∗, Jianlong Fu3†, and Hongyang Chao1,2†
1 School of Data and Computer Science, Sun Yat-sen University, Guangzhou, China 2 Key Laboratory of Machine Intelligence and Advanced Computing, Ministry of Education, China 3 Microsoft Research Asia zengyh7@mail2.sysu.edu.cn, isschhy@mail.sysu.edu.cn, jianf@microsoft.com
Abstract. High-quality video inpainting that completes missing regions in video frames is a promising yet challenging task. State-of-the-art approaches adopt attention models to complete a frame by searching missing contents from reference frames, and further complete whole videos frame by frame. However, these approaches can suﬀer from inconsistent attention results along spatial and temporal dimensions, which often leads to blurriness and temporal artifacts in videos. In this paper, we propose to learn a joint Spatial-Temporal Transformer Network (STTN) for video inpainting. Speciﬁcally, we simultaneously ﬁll missing regions in all input frames by self-attention, and propose to optimize STTN by a spatial-temporal adversarial loss. To show the superiority of the proposed model, we conduct both quantitative and qualitative evaluations by using standard stationary masks and more realistic moving object masks. Demo videos are available at https://github.com/researchmm/STTN.
Keywords: Video Inpainting; Generative Adversarial Networks
1 Introduction
Video inpainting is a task that aims at ﬁlling missing regions in video frames with plausible contents [2]. An eﬀective video inpainting algorithm has a wide range of practical applications, such as corrupted video restoration [10], unwanted object removal [22,26], video retargeting [16] and under/over-exposed image restoration [18]. Despite of the huge beneﬁts of this technology, high-quality video inpainting still meets grand challenges, such as the lack of high-level understanding of videos [15,29] and high computational complexity [5,33].
Signiﬁcant progress has been made by using 3D convolutions and recurrent networks for video inpainting [5,16,29]. These approaches usually ﬁll missing regions by aggregating information from nearby frames. However, they suﬀer from temporal artifacts due to limited temporal receptive ﬁelds. To solve the above challenge, state-of-the-art methods apply attention modules to capture
∗This work was done when Y. Zeng was an intern at Microsoft Research Asia. †J. Fu and H. Chao are the corresponding authors.

2

Y. Zeng, J. Fu, and H. Chao

our results input+mask

Fig. 1. We propose Spatial-Temporal Transformer Networks for completing missing regions in videos in a spatially and temporally coherent manner. The top row shows sample frames with yellow masks denoting user-selected regions to be removed. The bottom row shows our completion results. [Best viewed with zoom-in]
long-range correspondences, so that visible contents from distant frames can be used to ﬁll missing regions in a target frame [18,25]. One of these approaches synthesizes missing contents by a weighting sum over the aligned frames with frame-wise attention [18]. The other approach proposes a step-by-step fashion, which gradually ﬁlls missing regions with similar pixels from boundary towards the inside by pixel-wise attention [25]. Although promising results have been shown, these methods have two major limitations due to the signiﬁcant appearance changes caused by complex motions in videos. One limitation is that these methods usually assume global aﬃne transformations or homogeneous motions, which makes them hard to model complex motions and often leads to inconsistent matching in each frame or in each step. Another limitation is that all videos are processed frame by frame without specially-designed optimizations for temporal coherence. Although post-processing is usually used to stabilize generated videos, it is usually time-costing. Moreover, the post-processing may fail in cases with heavy artifacts.
To relieve the above limitations, we propose to learn a joint Spatial-Temporal Transformer Network (STTN) for video inpainting. We formulate video inpainting as a “multi-to-multi” problem, which takes both neighboring and distant frames as input and simultaneously ﬁlls missing regions in all input frames. To ﬁll missing regions in each frame, the transformer searches coherent contents from all the frames along both spatial and temporal dimensions by a proposed multi-scale patch-based attention module. Speciﬁcally, patches of diﬀerent scales are extracted from all the frames to cover diﬀerent appearance changes caused by complex motions. Diﬀerent heads of the transformer calculate similarities on spatial patches across diﬀerent scales. Through such a design, the most relevant patches can be detected and transformed for the missing regions by aggregating attention results from diﬀerent heads. Moreover, the spatial-temporal transformers can be fully exploited by stacking multiple layers, so that attention results for missing regions can be improved based on updated region features. Last but not least, we further leverage a spatial-temporal adversarial loss for joint opti-

Spatial-Temporal Transformer Networks for Video Inpainting

3

mization [5,6]. Such a loss design can optimize STTN to learn both perceptually pleasing and coherent visual contents for video inpainting.
In summary, our main contribution is to learn joint spatial and temporal transformations for video inpainting, by a deep generative model with adversarial training along spatial-temporal dimensions. Furthermore, the proposed multi-scale patch-based video frame representations can enable fast training and inference, which is important to video understanding tasks. We conduct both quantitative and qualitative evaluations using both stationary masks and moving object masks for simulating real-world applications (e.g., watermark removal and object removal). Experiments show that our model outperforms the stateof-the-arts by a signiﬁcant margin in terms of PSNR and VFID with relative improvements of 2.4% and 19.7%, respectively. We also show extensive ablation studies to verify the eﬀectiveness of the proposed spatial-temporal transformer.

2 Related Work
To develop high-quality video inpainting technology, many eﬀorts have been made on ﬁlling missing regions with spatially and temporally coherent contents in videos [2,13,18,24,29,33]. We discuss representative patch-based methods and deep generative models for video inpainting as below.
Patch-based methods: Early video inpainting methods mainly formulate the inpainting process as a patch-based optimization problem [1,7,26,31]. Specifically, these methods synthesize missing contents by sampling similar spatial or spatial-temporal patches from known regions based on a global optimization [24,27,31]. Some approaches try to improve performance by providing foreground and background segments [10,26]. Other works focus on joint estimations for both appearance and optical-ﬂow [13,22]. Although promising results can be achieved, patch-based optimization algorithms typically assume a homogeneous motion ﬁeld in holes and they are often limited by complex motion in general situations. Moreover, optimization-based inpainting methods often suﬀer from high computational complexity, which is infeasible for real-time applications [33].
Deep generative models: With the development of deep generative models, signiﬁcant progress has been made by deep video inpainting models. Wang et al. are the ﬁrst to propose to combine 3D and 2D fully convolution networks for learning temporal information and spatial details for video inpainting [29]. However, the results are blurry in complex scenes. Xu et al. improve the performance by jointly estimating both appearance and optical-ﬂow [33,37]. Kim et al. adopt recurrent networks for ensuring temporal coherence [16]. Chang et al. develop Temporal SN-PatchGAN [35] and temporal shift modules [19] for freeform video inpainting [5]. Although these methods can aggregate information from nearby frames, they fail to capture visible contents from distant frames.
To eﬀectively model long-range correspondences, recent models have adopted attention modules and show promising results in image and video synthesis [21,34,36]. Speciﬁcally, Lee et al. propose to synthesize missing contents by weighted summing aligned frames with frame-wise attention [18]. However, the

4

Y. Zeng, J. Fu, and H. Chao

frame 1

Spatial-Temporal Transformer
patch scale n: patch scale 1: Q

multi-layers frame 1

1x1

target frame
frame t input frames with framelevel encoder

1x1

1x1

softmax K
attention
V
extract patches batch dot

3x3

target frame
frame t output frames
with framelevel decoder

Fig. 2. Overview of the Spatial-Temporal Transformer Networks (STTN). STTN consists of 1) a frame-level encoder, 2) multi-layer multi-head spatial-temporal transformers and 3) a frame-level decoder. The transformers are designed to simultaneously ﬁll holes in all input frames with coherent contents. Speciﬁcally, a transformer matches the queries (Q) and keys (K) on spatial patches across diﬀerent scales in multiple heads, thus the values (V) of relevant regions can be detected and transformed for the holes. Moreover, the transformers can be fully exploited by stacking multiple layers to improve attention results based on updated region features. 1 × 1 and 3 × 3 denote the kernel size of 2D convolutions. More details can be found in Section 3.

frame-wise attention relies on global aﬃne transformations between frames, which is hard to handle complex motions. Oh et al. gradually ﬁll holes step by step with pixel-wise attention [25]. Despite promising results, it is hard to ensure consistent attention result in each recursion. Moreover, existing deep video inpainting models that adopt attention modules process videos frame by frame without specially-designed optimization for ensuring temporal coherence.

3 Spatial-Temporal Transformer Networks
3.1 Overall design
Problem formulation: Let X1T := {X1, X2, ..., XT } be a corrupted video sequence of height H, width W and frames length T . M1T := {M1, M2, ..., MT } denotes the corresponding frame-wise masks. For each mask Mi, value “0” indicates known pixels, and value “1” indicates missing regions. We formulate deep video inpainting as a self-supervised task that randomly creates (X1T , M1T ) pairs as input and reconstruct the original video frames Y1T = {Y1, Y2, ..., YT }. Specifically, we propose to learn a mapping function from masked video X1T to the output Yˆ1T := {Yˆ1, Yˆ2, ..., YˆT }, such that the conditional distribution of the real data p(Y1T |X1T ) can be approximated by the one of generated data p(Yˆ1T |X1T ).

Spatial-Temporal Transformer Networks for Video Inpainting

5

The intuition is that an occluded region in a current frame would probably be revealed in a region from a distant frame, especially when a mask is large or moving slowly. To ﬁll missing regions in a target frame, it is more eﬀective to borrow useful contents from the whole video by taking both neighboring frames and distant frames as conditions. To simultaneously complete all the input frames in a single feed-forward process, we formulate the video inpainting task as a “multi-to-multi” problem. Based on the Markov assumption [11], we simplify the “multi-to-multi” problem and denote it as:

T

p(Yˆ1T |X1T ) = p(Yˆtt−+nn|Xtt−+nn, X1T,s),

(1)

t=1

where Xtt−+nn denotes a short clip of neighboring frames with a center moment t and a temporal radius n. X1T,s denotes distant frames that are uniformly sampled from the videos X1T in a sampling rate of s. Since X1T,s can usually cover most key frames of the video, it is able to describe “the whole story” of the video. Under this formulation, video inpainting models are required to not only preserve temporal consistency in neighboring frames, but also make the completed frames to be coherent with “the whole story” of the video.
Network design: The overview of the proposed Spatial-Temporal Transformer Networks (STTN) is shown in Figure 2. As indicated in Eq. (1), STTN takes both neighboring frames Xtt−+nn and distant frames X1T,s as conditions, and complete all the input frames simultaneously. Speciﬁcally, STTN consists of three components, including a frame-level encoder, multi-layer multi-head spatialtemporal transformers, and a frame-level decoder. The frame-level encoder is built by stacking several 2D convolution layers with strides, which aims at encoding deep features from low-level pixels for each frame. Similarly, the frame-level decoder is designed to decode features back to frames. Spatial-temporal transformers are the core component, which aims at learning joint spatial-temporal transformations for all missing regions in the deep encoding space.

3.2 Spatial-temporal transformer

To ﬁll missing regions in each frame, spatial-temporal transformers are designed

to search coherent contents from all the input frames. Speciﬁcally, we propose

to search by a multi-head patch-based attention module along both spatial and

temporal dimensions. Diﬀerent heads of a transformer calculate attentions on

spatial patches across diﬀerent scales. Such a design allows us to handle appear-

ance changes caused by complex motions. For example, on one hand, attentions

for patches of large sizes (e.g., frame size H × W ) aim at completing station-

ary backgrounds. On the other hand, attentions for patches of small sizes (e.g.,

H 10

×

W 10

)

encourage

capturing

deep

correspondences

in

any

locations

of

videos

for moving foregrounds.

A multi-head transformer runs multiple “Embedding-Matching-Attending”

steps for diﬀerent patch sizes in parallel. In the Embedding step, features of each

6

Y. Zeng, J. Fu, and H. Chao

frame are mapped into query and memory (i.e., key-value pair) for further retrieval. In the Matching step, region aﬃnities are calculated by matching queries and keys among spatial patches that are extracted from all the frames. Finally, relevant regions are detected and transformed for missing regions in each frame in the Attending step. We introduce more details of each step as below.
Embedding: We use f1T = {f1, f2, ..., fT }, where fi ∈ Rh×w×c to denote the features encoded from the frame-level encoder or former transformers, which is the input of transformers in Fig. 2. Similar to many sequence modeling models, mapping features into key and memory embeddings is an important step in transformers [9,28]. Such a step enables modeling deep correspondences for each region in diﬀerent semantic spaces:

qi, (ki, vi) = Mq(fi), (Mk(fi), Mv(fi)),

(2)

where 1 ≤ i ≤ T , Mq(·), Mk(·) and Mv(·) denote the 1 × 1 2D convolutions that embed input features into query and memory (i.e., key-value pair) feature spaces while maintaining the spatial size of features.
Matching: We conduct patch-based matching in each head. In practice, we ﬁrst extract spatial patches of shape r1 × r2 × c from the query feature of each frame, and we obtain N = T × h/r1 × w/r2 patches. Similar operations are conducted to extract patches in the memory (i.e., key-value pair in the transformer). Such an eﬀective multi-scale patch-based video frame representation can avoid redundant patch matching and enable fast training and inference. Speciﬁcally, we reshape the query patches and key patches into 1-dimension vectors separately, so that patch-wise similarities can be calculated by matrix multiplication. The similarity between i-th patch and j-th patch is denoted as:

si,j

=

√pqi r1

· (pkj )T × r2 ×

, c

(3)

where 1 ≤ i, j ≤ N , pqi denotes the i-th query patch, pkj denotes the j-th key patch. The similarity value is normalized by the dimension of each vector to avoid
a small gradient caused by subsequent softmax function [28]. Corresponding
attention weights for all patches are calculated by a softmax function:



N

exp(si,j)/ exp(si,n), pj ∈ Ω,

αi,j =

n=1

(4)



 

0,

pj ∈ Ω¯ .

where Ω denotes visible regions outside masks, and Ω¯ denotes missing regions. Naturally, we only borrow features from visible regions for ﬁlling holes.
Attending: After modeling the deep correspondences for all spatial patches, the output for the query of each patch can be obtained by weighted summation of values from relevant patches:

N

oi =

αi,j pvj ,

(5)

j=1

Spatial-Temporal Transformer Networks for Video Inpainting

7

target frame

t = 1

t = 5

output frame

t = 15

t = 20

Fig. 3. Illustration of the attention maps for missing regions learned by STTN. For completing the dog corrupted by a random mask in a target frame (e.g., t=10), our model is able to “track” the moving dog over the video in both spatial and temporal dimensions. Attention regions are highlighted in bright yellow.
where pvj denotes the j-th value patch. After receiving the output for all patches, we piece all patches together and reshape them into T frames with original spatial size h × w × c. The resultant features from diﬀerent heads are concatenated and further passed through a subsequent 2D residual block [12]. This subsequent processing is used to enhance the attention results by looking at the context within the frame itself.
The power of the proposed transformer can be fully exploited by stacking multiple layers, so that attention results for missing regions can be improved based on updated region features in a single feed-forward process. Such a multilayer design promotes learning coherent spatial-temporal transformations for ﬁlling in missing regions. As shown in Fig. 3, we highlight the attention maps learned by STTN in the last layer in bright yellow. For the dog partially occluded by a random mask in a target frame, spatial-temporal transformers are able to “track” the moving dog over the video in both spatial and temporal dimensions and ﬁll missing regions in the dog with coherent contents.
3.3 Optimization objectives
As outlined in Section 3.1, we optimize the proposed STTN in an end-to-end manner by taking the original video frames as ground truths without any other labels. The principle of choosing optimization objectives is to ensure per-pixel reconstruction accuracy, perceptual rationality and spatial-temporal coherence in generated videos [5,8,14,18]. To this end, we select a pixel-wise reconstruction loss and a spatial-temporal adversarial loss as our optimization objectives.
In particular, we include L1 losses calculated between generated frames and original frames for ensuring per-pixel reconstruction accuracy in results. The L1

8

Y. Zeng, J. Fu, and H. Chao

losses for hole regions are denoted as:

Lhole = M1T

(Y1T M1T

− Yˆ1T )
1

1,

(6)

and corresponding L1 losses for valid regions are denoted as:

Lvalid =

(1 − M1T ) (Y1T − Yˆ1T ) 1 − M1T 1

1,

(7)

where indicates element-wise multiplication, and the values are normalized by the size of corresponding regions.
Inspired by the recent studies that adversarial training can help to ensure high-quality content generation results, we propose to use a Temporal PatchGAN (T-PatchGAN) as our discriminator [5,6,34,36]. Such an adversarial loss has shown promising results in enhancing both perceptual quality and spatialtemporal coherence in video inpainting [5,6]. In particular, the T-PatchGAN is composed of six layers of 3D convolution layers. The T-PatchGAN learns to distinguish each spatial-temporal feature as real or fake, so that spatial-temporal coherence and local-global perceptual details of real data can be modeled by STTN. The detailed optimization function for the T-PatchGAN discriminator is shown as follows:

LD = Ex∼PY1T (x)[ReLU (1 − D(x))] + Ez∼PYˆ1T (z)[ReLU (1 + D(z))], (8) and the adversarial loss for STTN is denoted as:

Ladv = −Ez∼PYˆ1T (z)[D(z)].

(9)

The overall optimization objectives are concluded as below:

L = λhole · Lhole + λvalid · Lvalid + λadv · Ladv.

(10)

We empirically set the weights for diﬀerent losses as: λhole = 1, Lvalid = 1, Ladv = 0.01. Since our model simultaneously complete all the input frames in a single feed-forward process, our model runs at 24.3 fps on a single GPU NVIDIA V100. More details are provided in the Section D of our supplementary material.

4 Experiments
4.1 Dataset
To evaluate the proposed model and make fair comparisons with SOTA approaches, we adopt the two most commonly-used datasets in video inpainting, including Youtube-VOS [32] and DAVIS [3]. In particular, YouTube-VOS contains 4,453 videos with various scenes, including bedrooms, streets, and so on. The average video length in Youtube-VOS is about 150 frames. We follow the

Spatial-Temporal Transformer Networks for Video Inpainting

9

original train/validation/test split (i.e., 3,471/474/508) and report experimental results on the test set for Youtube-VOS. In addition, we also evaluate different approaches on DAVIS dataset [3], as this dataset is composed of 150 high-quality videos of challenging camera motions and foreground motions. We follow the setting in previous works [16,33], and set the training/testing split as 60/90 videos. Since the training set of DAVIS is limited (60 videos with at most 90 frames for each), we initialize model weights by a pre-trained model on YouTube-VOS following the settings used in [16,33].
To simulate real-world applications, we evaluate models by using two types of free-form masks, including stationary masks and moving masks [6,16,18]. Because free-form masks are closer to real masks and have been proved to be eﬀective for training and evaluating inpainting models [5,6,20,23]. Speciﬁcally, for testing stationary masks, we generate stationary random shapes as testing masks to simulate applications like watermark removal. More details of the generation algorithm are provided in the Section B of our supplementary material. Since this type of application targets at reconstructing original videos, we take original videos as ground truths and evaluate models from both quantitative and qualitative aspects. For testing moving masks, we use foreground object annotations as testing masks to simulate applications like object removal. Since the ground truths after foreground removal are unavailable, we evaluate the models through qualitative analysis following previous works [16,18,33].

4.2 Baselines and evaluation metrics
Recent deep video inpainting approaches have shown state-of-the-art performance with fast computational time [16,18,25,33]. To evaluate our model and make fair comparisons, we select the most recent and the most competitive approaches for comparisons, which are listed as below:
– VINet [16] adopts a recurrent network to aggregate temporal features from neighboring frames.
– DFVI [33] ﬁlls missing regions in videos by pixel propagation algorithm based on completed optical ﬂows.
– LGTSM [6] proposes a learnable temporal shift module and a spatialtemporal adversarial loss for ensuring spatial and temporal coherence.
– CAP [18] synthesizes missing contents by a deep alignment network and a frame-based attention module.
We ﬁne-tune baselines multiple times on YouTube-VOS [32] and DAVIS [3] by their released models and codes and report their best results in this paper.
We report quantitative results by four numeric metrics, i.e., PSNR [33], SSIM [5], ﬂow warping error [17] and video-based Fr´echet Inception Distance (VFID) [5,30]. Speciﬁcally, we use PSNR and SSIM as they are the most widely-used metrics for video quality assessment. Besides, the ﬂow warping error is included to measure the temporal stability of generated videos. Moreover, FID has been proved to be an eﬀective perceptual metric and it has been used by many inpainting models [25,30,38]. In practice, we use an I3D [4] pre-trained video recognition model to calculate VFID following the settings in [5,30].

10

Y. Zeng, J. Fu, and H. Chao

4.3 Comparisons with state-of-the-arts
Quantitative Evaluation: We report quantitative results for ﬁlling stationary masks on Youtube-VOS [32] and DAVIS [3] in Table 1. As stationary masks often involve partially occluded foreground objects, it is challenging to reconstruct a video especially with complex appearances and object motions. Table 1 shows that, compared with SOTA models, our model performs better video reconstruction quality with both per-pixel and overall perceptual measurements. Speciﬁcally, our model outperforms the SOTA models by a signiﬁcant margin, especially in terms of PSNR, ﬂow warp error and VFID. The speciﬁc gains are 2.4%, 1.3% and 19.7% relative improvements on Youtube-VOS, respectively. The superior results show the eﬀectiveness of the proposed spatial-temporal transformer and adversarial optimizations in STTN.

DAVIS Youtube-vos

Models PSNR SSIM (%)

VINet[16] 29.20 DFVI [33] 29.16 LGTSM [6] 29.74 CAP [18] 31.58
Ours 32.34

94.34 94.29 95.04 96.07 96.55

VINet[16] 28.96 DFVI [33] 28.81 LGTSM [6] 28.57 CAP [18] 30.28
Ours 30.67

94.11 94.04 94.09 95.21 95.60

Ewarp (%)† VFID†

0.1490 0.1509 0.1859 0.1470 0.1451

0.072 0.066 0.070 0.071 0.053

0.1785 0.1880 0.2566 0.1824 0.1779

0.199 0.187 0.170 0.182 0.149

Table 1. Quantitative comparisons with state-of-the-art models on Youtube-VOS [32]
and DAVIS [3]. Our model outperforms baselines in terms of PSNR [33], SSIM [5], ﬂow warping error (Ewarp) [17] and VFID [30]. Higher is better. † Lower is better.

Qualitative Evaluation: For each video from test sets, we take all frames for testing. To compare visual results from diﬀerent models, we follow the setting used by most video inpainting works and randomly sample three frames from the video for case study [18,25,29]. We select the most three competitive models, DFVI [33], LGTSM [6] and CAP [18] for comparing results for stationary masks in Fig. 4. We also show a case for ﬁlling in moving masks in Fig. 5. To conduct pair-wise comparisons and analysis in Fig. 5, we select the most competitive model, CAP [18], according to the quantitative comparison results. We can ﬁnd from the visual results that our model is able to generate perceptually pleasing and coherent contents in results. More video cases are available online§.
In addition to visual comparisons, we visualize the attention maps learned by STTN in Fig. 6. Speciﬁcally, we highlight the top three relevant regions captured by the last transformer in STTN in bright yellow. The relevant regions
§video demo: https://github.com/researchmm/STTN

Spatial-Temporal Transformer Networks for Video Inpainting

11

input frame

DFVI

LGTSM

CAP

ours

Fig. 4. Visual results for stationary masks. The ﬁrst column shows input frames from DAVIS [3] (top-3) and YouTube-VOS [32] (bottom-3), followed by results from DFVI [33], LGTSM [6], CAP [18], and our model. Comparing with the SOTAs, our model generates more coherent structures and details of the legs and boats in results.

are selected according to the attention weights calculated by Eq. (4). We can ﬁnd in Fig. 6 that STTN is able to precisely attend to the objects for ﬁlling partially occluded objects in the ﬁrst and the third cases. For ﬁlling the backgrounds in the second and the fourth cases, STTN can correctly attend to the backgrounds.
User Study: We conduct a user study for a more comprehensive comparison. we choose LGTSM [6] and CAP [18] as two strong baselines, since we have observed their signiﬁcantly better performance than other baselines from both quantitative and qualitative results. We randomly sampled 10 videos (5 from DAVIS and 5 from YouTube-VOS) for stationary masks ﬁlling, and 10 videos from DAVIS for moving masks ﬁlling. In practice, 28 volunteers are invited to the user study. In each trial, inpainting results from diﬀerent models are shown to the volunteers, and the volunteers are required to rank the inpainting results. To ensure a reliable subjective evaluation, videos can be replayed multiple times by volunteers. Each participant is required to ﬁnish 20 groups of trials without time limit. Most participants can ﬁnish the task within 30 minutes. The results of the user study are concluded in Fig 7. We can ﬁnd that our model performs better in most cases for these two types of masks.

12

Y. Zeng, J. Fu, and H. Chao

input frame

CAP

ours

Fig. 5. Visual comparisons for ﬁlling moving masks. Comparing with CAP [18], one of the most competitive models for ﬁlling moving masks, our model is able to generate visually pleasing results even under complex scenes (e.g., clear faces for the ﬁrst and the third frames, and better results than CAP for the second frame).

t = 25

t = 25

t = 12

t = 14

t = 30

t = 43

t = 43

t = 40

t = 50

t = 60

t = 40

t = 40

t = 8

t = 16

t = 28

t = 30 input frame

t = 30 output frame

t = 34

t = 46 attention map

t = 52

Fig. 6. Illustration of attention maps for missing regions learned by the proposed STTN. We highlight the most relevant patches in yellow according to attention weights. For ﬁlling partially occluded objects (the ﬁrst and the third cases), STTN can precisely attend to the objects. For ﬁlling backgrounds (the second and the fourth cases), STTN can correctly attend to the backgrounds.

Spatial-Temporal Transformer Networks for Video Inpainting

13

(a) stationary holes

60%

40%

20%

0% rank 1

rank 2

rank 3

Ours CAP LGTSM

(b) moving holes

60%

40%

20%

0% rank 1

rank 2

rank 3

Ours CAP LGTSM

Fig. 7. User study. “Rank x” means the percentage of results from each model being chosen as the x-th best. Our model is ranked in ﬁrst place in most cases.
4.4 Ablation Study
To verify the eﬀectiveness of the spatial-temporal transformers, this section presents ablation studies on DAVIS dataset [3] with stationary masks. More ablation studies can be found in the Section E of our supplementary material.
Eﬀectiveness of multi-scale: To verify the eﬀectiveness of using multiscale patches in multiple heads, we compare our model with several single-head STTNs with diﬀerent patch sizes. In practice, we select patch sizes according to the spatial size of features, so that the features can be divided into patches without overlapping. The spatial size of features in our experiments is 108 × 60. Results in Table 2 show that our full model with multi-scale patch-based video frame representation achieves the best performance under this setting.
Patch size PSNR SSIM(%) Ewarp (%)† VFID† 108 × 60 30.16 95.16 0.2243 0.168 36 × 20 30.11 95.13 0.2051 0.160 18 × 10 30.17 95.20 0.1961 0.159 9 × 5 30.43 95.39 0.1808 0.163 Ours 30.67 95.60 0.1779 0.149
Table 2. Ablation study by using diﬀerent patch scales in attention layers. Ours combines the above four scales. Higher is better. † Lower is better.

Eﬀectiveness of multi-layer: The spatial-temporal transformers can be stacked by multiple layers to repeat the inpainting process based on updated region features. We verify the eﬀectiveness of using multi-layer spatial-temporal transformers in Table 3. We ﬁnd that stacking more transformers can bring continuous improvements and the best results can be achieved by stacking eight layers. Therefore, we use eight layers in transformers as our full model.

14

Y. Zeng, J. Fu, and H. Chao

Stack PSNR SSIM(%) Ewarp (%)† VFID†
×2 30.17 95.17 0.1843 0.162 ×4 30.38 95.37 0.1802 0.159 ×6 30.53 95.47 0.1797 0.155 ×8 (ours) 30.67 95.60 0.1779 0.149

Table 3. Ablation study by using diﬀerent stacking number of the proposed spatialtemporal transformers. Higher is better. † Lower is better.

our results input+mask

Fig. 8. A failure case. The bottom row shows our results with enlarged patches in the bottom right corner. For reconstructing the dancing woman occluded by a large mask, STTN fails to generate continuous motions and it generates blurs inside the mask.
5 Conclusions
In this paper, we propose a novel joint spatial-temporal transformation learning for video inpainting. Extensive experiments have shown the eﬀectiveness of multi-scale patch-based video frame representation in deep video inpainting models. Coupled with a spatial-temporal adversarial loss, our model can be optimized to simultaneously complete all the input frames in an eﬃcient way. The results on YouTube-VOS [32] and DAVIS [3] with challenging free-form masks show the state-of-the-art performance by our model.
We note that STTN may generate blurs in large missing masks if continuous quick motions occur. As shown in Fig. 8, STTN fails to generate continuous dancing motions and it generates blurs when reconstructing the dancing woman in the ﬁrst frame. We infer that STTN only calculates attention among spatial patches, and the short-term temporal continuity of complex motions are hard to capture without 3D representations. In the future, we plan to extend the proposed transformer by using attention on 3D spatial-temporal patches to improve the short-term coherence. We also plan to investigate other types of temporal losses [17,30] for joint optimization in the future.
Acknowledgments
This project was supported by NSF of China under Grant 61672548, U1611461.

Spatial-Temporal Transformer Networks for Video Inpainting

15

References

1. Barnes, C., Shechtman, E., Finkelstein, A., Goldman, D.B.: Patchmatch: A randomized correspondence algorithm for structural image editing. TOG 28(3), 24:1– 24:11 (2009)
2. Bertalmio, M., Bertozzi, A.L., Sapiro, G.: Navier-stokes, ﬂuid dynamics, and image and video inpainting. In: CVPR. pp. 355–362 (2001)
3. Caelles, S., Montes, A., Maninis, K.K., Chen, Y., Van Gool, L., Perazzi, F., PontTuset, J.: The 2018 davis challenge on video object segmentation. arXiv (2018)
4. Carreira, J., Zisserman, A.: Quo vadis, action recognition? a new model and the kinetics dataset. In: CVPR. pp. 6299–6308 (2017)
5. Chang, Y.L., Liu, Z.Y., Lee, K.Y., Hsu, W.: Free-form video inpainting with 3d gated convolution and temporal patchgan. In: ICCV. pp. 9066–9075 (2019)
6. Chang, Y.L., Liu, Z.Y., Lee, K.Y., Hsu, W.: Learnable gated temporal shift module for deep video inpainting. In: BMVC (2019)
7. Criminisi, A., P´erez, P., Toyama, K.: Region ﬁlling and object removal by exemplarbased image inpainting. TIP 13(9), 1200–1212 (2004)
8. Gatys, L.A., Ecker, A.S., Bethge, M.: Image style transfer using convolutional neural networks. In: CVPR. pp. 2414–2423 (2016)
9. Girdhar, R., Carreira, J., Doersch, C., Zisserman, A.: Video action transformer network. In: CVPR. pp. 244–253 (2019)
10. Granados, M., Tompkin, J., Kim, K., Grau, O., Kautz, J., Theobalt, C.: How not to be seenobject removal from videos of crowded scenes. Computer Graphics Forum 31(21), 219–228 (2012)
11. Hausman, D.M., Woodward, J.: Independence, invariance and the causal markov condition. The British journal for the philosophy of science 50(4), 521–583 (1999)
12. He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition. In: CVPR. pp. 770–778 (2016)
13. Huang, J.B., Kang, S.B., Ahuja, N., Kopf, J.: Temporally coherent completion of dynamic video. TOG 35(6), 1–11 (2016)
14. Johnson, J., Alahi, A., Fei-Fei, L.: Perceptual losses for real-time style transfer and super-resolution. In: ECCV. pp. 694–711 (2016)
15. Kim, D., Woo, S., Lee, J.Y., Kweon, I.S.: Deep blind video decaptioning by temporal aggregation and recurrence. In: CVPR. pp. 4263–4272 (2019)
16. Kim, D., Woo, S., Lee, J.Y., Kweon, I.S.: Deep video inpainting. In: CVPR. pp. 5792–5801 (2019)
17. Lai, W.S., Huang, J.B., Wang, O., Shechtman, E., Yumer, E., Yang, M.H.: Learning blind video temporal consistency. In: ECCV. pp. 170–185 (2018)
18. Lee, S., Oh, S.W., Won, D., Kim, S.J.: Copy-and-paste networks for deep video inpainting. In: ICCV. pp. 4413–4421 (2019)
19. Lin, J., Gan, C., Han, S.: Tsm: Temporal shift module for eﬃcient video understanding. In: ICCV. pp. 7083–7093 (2019)
20. Liu, G., Reda, F.A., Shih, K.J., Wang, T.C., Tao, A., Catanzaro, B.: Image inpainting for irregular holes using partial convolutions. In: ECCV. pp. 85–100 (2018)
21. Ma, S., Fu, J., Wen Chen, C., Mei, T.: Da-gan: Instance-level image translation by deep attention generative adversarial networks. In: CVPR. pp. 5657–5666 (2018)
22. Matsushita, Y., Ofek, E., Ge, W., Tang, X., Shum, H.Y.: Full-frame video stabilization with motion inpainting. TPAMI 28(7), 1150–1163 (2006)
23. Nazeri, K., Ng, E., Joseph, T., Qureshi, F., Ebrahimi, M.: Edgeconnect: Generative image inpainting with adversarial edge learning. In: ICCVW (2019)

16

Y. Zeng, J. Fu, and H. Chao

24. Newson, A., Almansa, A., Fradet, M., Gousseau, Y., P´erez, P.: Video inpainting of complex scenes. SIAM Journal on Imaging Sciences 7(4), 1993–2019 (2014)
25. Oh, S.W., Lee, S., Lee, J.Y., Kim, S.J.: Onion-peel networks for deep video completion. In: ICCV. pp. 4403–4412 (2019)
26. Patwardhan, K.A., Sapiro, G., Bertalmio, M.: Video inpainting of occluding and occluded objects. In: ICIP. pp. 11–69 (2005)
27. Patwardhan, K.A., Sapiro, G., Bertalm´ıo, M.: Video inpainting under constrained camera motion. TIP 16(2), 545–553 (2007)
28. Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A.N., Kaiser, L., Polosukhin, I.: Attention is all you need. In: NeurIPS. pp. 5998–6008 (2017)
29. Wang, C., Huang, H., Han, X., Wang, J.: Video inpainting by jointly learning temporal structure and spatial details. In: AAAI. pp. 5232–5239 (2019)
30. Wang, T.C., Liu, M.Y., Zhu, J.Y., Liu, G., Tao, A., Kautz, J., Catanzaro, B.: Video-to-video synthesis. In: NeuraIPS. pp. 1152–1164 (2018)
31. Wexler, Y., Shechtman, E., Irani, M.: Space-time completion of video. TPAMI 29(3), 463–476 (2007)
32. Xu, N., Yang, L., Fan, Y., Yue, D., Liang, Y., Yang, J., Huang, T.: Youtube-vos: A large-scale video object segmentation benchmark. arXiv (2018)
33. Xu, R., Li, X., Zhou, B., Loy, C.C.: Deep ﬂow-guided video inpainting. In: CVPR. pp. 3723–3732 (2019)
34. Yang, F., Yang, H., Fu, J., Lu, H., Guo, B.: Learning texture transformer network for image super-resolution. In: CVPR. pp. 5791–5800 (2020)
35. Yu, J., Lin, Z., Yang, J., Shen, X., Lu, X., Huang, T.S.: Free-form image inpainting with gated convolution. In: ICCV. pp. 4471–4480 (2019)
36. Zeng, Y., Fu, J., Chao, H., Guo, B.: Learning pyramid-context encoder network for high-quality image inpainting. In: CVPR. pp. 1486–1494 (2019)
37. Zhang, H., Mai, L., Xu, N., Wang, Z., Collomosse, J., Jin, H.: An internal learning approach to video inpainting. In: CVPR. pp. 2720–2729 (2019)
38. Zhang, R., Isola, P., Efros, A.A., Shechtman, E., Wang, O.: The unreasonable eﬀectiveness of deep features as a perceptual metric. In: CVPR. pp. 586–595 (2018)

Spatial-Temporal Transformer Networks for Video Inpainting

17

Supplementary Material

This supplementary material presents the details of complete video inpainting results in Section A and our stationary mask generation algorithm in Section B. We provide the details of our network architectures in Section C and the implementation details in Section D. Finally, extensive ablation studies and analysis for the proposed Spatial-Temporal Transformer Networks for video inpainting can be found in Section E.

A Video Inpainting Results
To compare visual results from diﬀerent inpainting models in our main paper, we follow the setting used in most video inpainting works [13,16,33]. Speciﬁcally, we sample several frames from video results and show them in Figure 4 and Figure 5 in the main paper. However, sampled frames cannot truly reﬂect video results. Sometimes sampled static frames look less blurry but artifacts can be stronger in a dynamic video. Therefore, we provide 20 video cases for a more comprehensive comparison¶.
In practice, we test all the videos in the test sets of DAVIS dataset [3] (90 cases) and Youtube-VOS dataset [32] (508 cases), and we randomly show 20 cases for visual comparisons. Speciﬁcally, ﬁve cases from DAVIS and ﬁve cases from Youtube-VOS are used to test ﬁlling stationary masks. Since Youtube-VOS has no dense object annotations, we sample 10 videos with dense object annotations from DAVIS to test ﬁlling moving masks following the setting used in previous works [16,18,33]. To conduct side-by-side comparisons and analysis, we select the two most competitive video inpainting models, LGTSM [6] and CAP [18] in the videos. LGTSM and CAP are ﬁne-tuned multiple times to achieve optimal video results by the codes and models publicly provided by their oﬃcial Github homepage . We can ﬁnd from the video results that our model outperforms the state-of-the-art models in most cases.

B Stationary Mask Generation Algorithm
Inspired by Xu et al. [33], we use stationary masks and moving masks as testing masks to simulate real-world applications (e.g., watermark removal and object removal) in the main paper. As introduced in Section 4.1 in the main paper, on one hand, we use frame-wise foreground object annotations from DAVIS datasets [3] as moving masks to simulate applications like object removal. On the other hand, we generate random shapes as stationary masks to simulate applications like watermark removal. Speciﬁcally, for the task of removing watermarks, a user often draw a mask along the outline of a watermark. Inspired by previous mask
¶video demo: https://github.com/researchmm/STTN LGTSM: https://github.com/amjltc295/Free-Form-Video-Inpainting
CAP: https://github.com/shleecs/Copy-and-Paste-Networks-for-Deep-Video-Inpainting

18

Y. Zeng, J. Fu, and H. Chao

generation algorithms [5,35], we propose a stationary mask generation algorithm to simulate such a behavior for drawing masks for watermarks. Speciﬁcally, the proposed algorithm randomly generates a set of control points around a unit circle, and then it smoothly connects these points into a closed cyclic contour by cubic Bezier curves. The details of the stationary mask generation algorithm are shown in Algorithm 1 as follows.

Algorithm 1 Algorithm for stationary mask generation. maxPointNum, maxLength are hyper-parameters to control the statinary mask generation.
mask = zeros(imgHeight, imgWidth) pointNum = random.uniform(maxPointNum) startX = origX = random.uniform(imgWidth) startY = origY = random.uniform(imgHeight) angles = linspace(0, 2*pi, pointNum) for i=0 to pointNum do
length = random.uniform(maxLength) x = sin(angles[i]) * length y = cos(angles[i]) * length // comment: ensuring smoothness of contours Connect (startX, startY) to (x, y) by cubic Bezier curves. startX = x startY = y end for // comment: ensuring a closed cyclic contour Connect (startX, startY) to (origX, origY) by cubic Bezier curves.

C Details of Network Architecture
The Spatial-Temporal Transformer Network (STTN) is built upon a generative adversarial framework. Speciﬁcally, the proposed STTN plays a role as a generator in the framework, and we adopt a Temporal PatchGAN (T-PatchGAN) [5] as our discriminator. The T-PatchGAN is composed of six layers of 3D convolution layers. Speciﬁcally, the T-PatchGAN learns to classify each spatial-temporal feature as real or fake, while STTN learns to fool the T-PatchGAN. Such an adversarial training allows STTN to model the local-global perceptual rationality and the spatial-temporal coherence of real videos [5]. In addition to the introduction in Section 3 in the main paper, we provide the details of the architectures of STTN and the T-PatchGAN in Table 4 and Table 5, respectively. Speciﬁcally, features inside holes are computed by dilated 2D convolutions. We argue that STTN is able to leverages multi-scale contexts and updates holes’ features multiple times to improve attention results.

Spatial-Temporal Transformer Networks for Video Inpainting

19

Module Name Filter Size # Channels Stride/Up Factor Nonlinearity

2dConv

3×3

64

2dConv

3×3

64

2dConv

3×3

128

2dConv

3×3

256

Transformer × 8

1×1 3×3

256

BilinearUpSample -

256

2dConv

3×3

128

2dConv

3×3

64

BilinearUpSample -

64

2dConv

3×3

64

2dConv

3×3

3

2

LeakyReLU(0.2)

1

LeakyReLU(0.2)

2

LeakyReLU(0.2)

1

LeakyReLU(0.2)

1

-

1

LeakyReLU(0.2)

2

-

1

LeakyReLU(0.2)

1

LeakyReLU(0.2)

2

-

1

LeakyReLU(0.2)

1

Tanh

Table 4. Details of the proposed Spatial-Temporal Transformer Networks (STTN). “2dConv” means 2D convolution layers. “Transformer × 8” denotes stacking the proposed spatial-temporal transformers by eight layers. A transformer layer involves 1 × 1 and 3 × 3 convolutions (The overview of STTN is shown in Fig. 2 in the main paper). We use bilinear interpolations for all upsample operations on feature maps [20,25]. We show whether and what nonlinearity layer is used in the nonlinearity column.

Module Name Filter Size # Channels Stride Nonlinearity

SN-3dConv SN-3dConv SN-3dConv SN-3dConv SN-3dConv SN-3dConv

3×5×5 3×5×5 3×5×5 3×5×5 3×5×5 3×5×5

64 (1,2,2) LeakyReLU(0.2)

128 (1,2,2) LeakyReLU(0.2)

256 (1,2,2) LeakyReLU(0.2)

256 (1,2,2) LeakyReLU(0.2)

256 (1,2,2) LeakyReLU(0.2)

256 (1,2,2)

-

Table 5. Details of the Temporal-PatchGAN (T-PatchGAN) discriminator [5]. The T-PatchGAN is composed of six 3D convolution layers. “SN-3dConv” denotes a 3D convolution layer that adopts spectral normalization to stabilize GAN’s training [5].

20

Y. Zeng, J. Fu, and H. Chao

D Implementation details

Hyper-parameters: To maintain the aspect ratio of videos and take into account the memory limitations of modern GPUs, we resize all video frames into 432 × 240 for both training and testing [13,16,18,33]. During training, we set the batch size as 8, and the learning rate starts with 1e-4 and decays with factor 0.1 every 150k iterations. Speciﬁcally, for each iteration, we sample ﬁve frames from a video in a consecutive or discontinuous manner with equal probability for training following Lee et al. [18,25].
Computation complexity: Our full model has a total of 12.6M trainable parameters. It costs about 3.9G GPU memory for completing a video from DAVIS dataset [3] by STTN on average. The proposed multi-scale patch-based video frame representations can enable fast training and inference. Speciﬁcally, our model runs at about 24.3fps with an NVIDIA V100 GPU and it runs at about 10.43 fps with an NVIDIA P100 GPU on average. Its total training time was about 3 days on YouTube-VOS dataset [32] and one day for ﬁne-tuning on DAVIS dataset [3] with 8 Tesla V100 GPUs. The computation complexity of the proposed spatial-temporal transformers are denoted as:

D
O(
l=1

2

·

(n

·

HW )2 pw ph

·

(pw ph Cl )

+

nkl2HW Cl−1Cl

) ≈ O(n2),

(11)

where D is the number of transformer layers, n is the number of input frames, HW is the feature size, pwph is the patch size, kl denotes for kernel size, and C is the channel number of features. In Eq. (11), we focus on the computation complexity caused by the spatial-temporal transformers and leave out other computation costs (e.g., encoding and decoding costs) for simpliﬁcation.

E More ablation studies
To verify the eﬀectiveness of the proposed Spatial-Temporal Transformer Networks (STTN) for video inpainting, this section presents extensive ablation studies on DAVIS dataset [3] with stationary masks.
Eﬀectiveness of utilizing distant frames: we test our full model with different sample rates to prove the beneﬁts of utilizing distant frames. Quantitative comparison results on DAVIS dataset [3] with stationary masks can be found in Table 6. The ﬁrst row (s > T ) means that the STTN takes only neighboring frames as input. Besides, the second row (s = 20) means that the STTN takes both neighboring frames and distant frames that are uniformly sampled from the videos in a sampling rate of 20 frames.
Table 6 shows that leveraging visible contexts in distant frames helps in generating better results especially in terms of VFID with 5.70% relative improvements. Based on the observation that most videos in YouTube-VOS dataset [32] and DAVIS dataset [3] won’t vary a lot within 10 frames on average, we set the sample rate as 10 in our full model to avoid sampling redundant frames and to save computation costs.

Spatial-Temporal Transformer Networks for Video Inpainting

21

Sample Rate PSNR SSIM(%) Ewarp (%)† VFID†
s > T 30.55 95.47 0.1802 0.158 s = 20 30.62 95.55 0.1790 0.152 s = 10 (ours) 30.67 95.60 0.1779 0.149

Table 6. Ablation study by utilizing distant frames in diﬀerent sampling rates. Our full model set s = 10. Higher is better. † Lower is better.

Eﬀectiveness of masked normalization: As shown in Eq. (3) and Eq. (4) in the main paper, we normalize the value of similarity by the dimension of vectors and ﬁlter out unknown regions for similarities calculating. In this part, we conduct comparisons between models with or without such a masked normalization in Table 7. Results show that such an operation is necessary since it brings improvements with a signiﬁcant margin comparing with the one without masked normalization.
PSNR SSIM(%) Ewarp (%)† VFID† w/o masked norm. 30.39 95.32 0.1849 0.162
w/ masked norm. 30.67 95.60 0.1779 0.149
Table 7. Ablation study for the eﬀectiveness of masked normalization operation on similarity calculation. Higher is better. † Lower is better.

Eﬀectiveness of the Temporal PatchGAN Loss: Recent state-of-theart deep video inpainting models that adopt attention modules often include a perceptual loss [14] and a style loss [8] as optimization objectives for perceptually pleasing results [18,25]. However, they do not leverage specially-designed losses for ensuring temporal coherence. Chang et al. propose a novel Temporal PatchGAN (T-PatchGAN) loss for ensuring both perceptual rationality and spatialtemporal coherence of videos [5,6]. However, they only apply T-PatchGAN on consecutive frames while the attention-based deep video inpainting models take discontinuous frames as input for training. We are the ﬁrst to introduce TPatchGAN in video inpainting models that adopt attention modules and show that T-PatchGAN is also powerful in discontinuous frames. Such a joint optimization encourages STTN to learn both local-global perceptual rationality and coherent spatial-temporal transformations for video inpainting.
We verify the eﬀectiveness of the T-PatchGAN loss by quantitative comparisons in Table 8. Compared with the STTN optimized by a style loss [8] and a perceptual loss [14] following previous works [18,25], the STTN optimized by a T-PatchGAN loss performs better by a signiﬁcant margin, especially in terms of VFID with 6.9% relative improvements. We also provide a visual comparison in Fig. 9. The visual results show that the STTN optimized by a T-PatchGAN

22

Y. Zeng, J. Fu, and H. Chao

loss can generate more coherent results than the one optimized by a perceptual loss and a style loss. The superior results show the eﬀectiveness of the joint spatial-temporal adversarial learning in STTN.

losses PSNR SSIM(%) Ewarp (%)† VFID† w/ style [8], w/ perceptual [14] 30.38 95.35 0.1821 0.160
w/ T-PatchGAN [5] 30.67 95.60 0.1779 0.149
Table 8. Ablation study for diﬀerent losses. Higher is better. † Lower is better.

input frame

w/ perceptual and style losses

w/ T-PatchGAN loss

Fig. 9. Visual comparisons between an STTN optimized by a perceptual loss [14] and a style loss [8] and an STTN optimized by a T-PatchGAN loss [5]. These two models perform similarly in small missing regions, while in large missing regions, the model optimized by perceptual and style losses tends to generate artifacts in the missing regions. [Best viewed with zoom-in]

Speciﬁcally, perceptual loss and style loss have shown great impacts in many image generation tasks since they were proposed [8,14,20]. A perceptual loss computes L1 distance between the activation maps of real frames and generated frames. A style loss is similar to the perceptual loss but aims at minimizing the L1 distance between Gram matrices of the activation maps of real frames and generated frames. In practice, the activation maps are extracted from layers (e.g.,

Spatial-Temporal Transformer Networks for Video Inpainting

23

pool1, pool2 and pool3) of a pre-trained classiﬁcation network (more details see [18,20,25]). With the help of extracted low-level features, the perceptual loss and the style loss are helpful in generating high-frequency details.
Unfortunately, perceptual and style losses are calculated on the features of a single frame and they are unable to leverage temporal contexts. When ﬁlling in a large missing region in videos, the perceptual and style losses are hard to enforce the generator to synthesize rational contents due to limited contexts. As a result, they have to generate meaningless high-frequency textures to match ground truths’ low-level features. For example, for ﬁlling the large missing regions in the second and the third frames in Fig. 9, the STTN optimized by perceptual and style losses tends to generate high-frequency artifacts in the large missing regions. Similar artifacts can be found in the failure cases of previous works [5,20]. Since the T-PatchGAN is able to leverage temporal contexts to optimize the generator, there are fewer artifacts in the results by using the T-PatchGAN. For the above considerations, we use the T-PatchGAN loss instead of the perceptual and style losses in our ﬁnal optimization objectives. In the future, we plan to design video-based perceptual and style losses which are computed on spatialtemporal features to leverage temporal contexts for optimization.

